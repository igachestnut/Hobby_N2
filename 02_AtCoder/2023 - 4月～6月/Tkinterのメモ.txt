目的
　研究室でTkinterを使ったアプリケーションがあった。
　それは基本ベタ打ちのプログラムで編集しにくい。
　そのままの実装でも問題ないが、
  Tkinterのクラスを使った書き方を学ぶことで、
　のちに編集しやすいプログラムを作成できるようになる。
　また、今後Tkinterや、他のメソッドを使う際に応用できるようになるため。

////////////////////////////////////////////////////////////////////////////////////////////////////////////

MEMO

学んだこと

・クラスの中にクラスを入れたり、クラスの中にdefを二つ入れる方法と必要性。
　class 
   def 
   def 
   class
    def
    def
   def
    def

 使う場面。
　def def　もしくはdef class
　def __init__()でインスタンスを設計する際、
　　関数を呼び出すときに扱う。

 最小構成?　def def
　class A : 
    def __init__(self,master=None) :
      self.---
      self.Create1() #メソッドを呼び出して、その他インスタンスを作成する。
    def Create1(self) :
      def _create() :
        ----
      
      self.a = _create()
      self.b = _create()

  正確には
　　def(self)
      def()
      というように、深層の関数にはselfが必要ない。（必要ない場合が多い）
　　　独立した関数ということですね。
　　　  

  最小構成　class def class
   class A :
     def __init__(self,master=None) :
      self.---
      self.Create1() :
     def Create1(self) :
      class Var(---) :
        def __init__(self) :
          self.----
          self.----
        def childmethod1() :
          ---
      self.a = Var(self)
    こっちも内部クラスの宣言にはselfは必要ない。
　　　外部クラスで扱った情報を内部クラスに渡したいときは、　
　　　selfではなく新しい変数で渡すイメージのほうがいい



・tk.Frame()とtk.Tk()の違いについて教えて
　tk.Frame
   短形な領域を作成するためのメソッド
  tk.Tk()
　 アプリケーションのメインウィンドウを読み込むためのもの


・tk.Button()の使い方
　(ウィンドウ, text="" , command= メソッド)










思いついたこと

Tkinterのclass


class Application(tk.Frame) :
  def __init__(self,master=None) :
   super().__init__(master)
   
   self.master.title(名前) 
   self.pack()

   self.UI位置を決めるメソッドもしくはインスタンスとして宣言。

   self.画像を表示する場所を作成するメソッド
　 self.参照先を表示するメソッド
   self.位置情報を表示する場所を作成するメソッド
   self.ボタンの作成メソッド
　 
　 self.画像を保存するかどうかのチェックボタンを作成するメソッド ⇒new!

root⇒ルートウィンドウ（メインウィンドウ、関数外からメインウィンドウの名前）
master⇒メインウィンドウ（関数内）（んまぁmasterと同じやね。）ちなroot.quitで「処理の終了」になる



インデント０
⇒class
　クラスの宣言とクラスの呼び出しをする階層

インデント1
⇒def __init__(self) 
　「初期化」　と
　アプリケーションを作り出すための、「ボタンの配置」などを指定するメソッド
　
インデント２
⇒class,def()(selfなし）
　そのボタンを作り出すための具体的な動作などを書き記す。




ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
感じたこと
　
・インデントの階層ごとに行っている内容を言語化すると、何を書いているのかを分かりやすくすることができる。
　

東方CBの奴だったら、

MIL
UIManager
MusicPlayer

MIL
0インデント
MusicInfoBuilderの定義と呼び出し（んまあ、一応Startが呼び出しにはなるけど）
　
1インデント
　MusicInfoBuilderの初期化
　MusicInfoBuilderを作り出すための「情報抽出」「情報操作（格納）」をするメソッド
　また、位置と共通操作を書き記すメソッドかもしれない。

　２インデント以降
　　どのように「情報抽出」、情報操作を行うのかを格納するメソッド。
　　　特有の動きということだね。


UIManager
0インデント
UIManagerの定義と呼び出し

１インデント
　メンバ：
  barのImage
　text
　position

　初期：Barの作成をし、描写する
　　crateBar
　初期：TextMeshProを描写するメソッド
　
　Start（）
　Update（）


　共通：一つBarを作成するメソッド
　共通：BarとTextのpositionを制御するメソッド



pythonはインデント＆ネストは同義語だけど
他の言語において、
　コードをきれいに見せるための階層の意味合いならネストの方がBetter


メソッドの中にメソッドを置くこと
　⇒流儀によって分けられるけど、分けてもいいし、そのまま作ってもいい。

　共通の動作があるなら、1ネストに入れる







結論：
　今までの書き方で問題ない？