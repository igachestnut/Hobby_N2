""" #####################################################
発想

- https://atcoder.jp/contests/tessoku-book/tasks/tessoku_book_cs

- SとTを一致させることができる???
- 任意回できる処理
    - 削除
    - 一つの文字を別のものに変更する
    - Sの中を適当な位置に、文字を一つ挿入

- Tを目指す。 
- Sの任意要素si, Tの任意要素i (0<i<=min(len(T),len(S)) 
- case 1: si == ti の場合
    変える必要がない。???
    - S=bbttb, T=attaa の場合?? 同じ位置はi=3である。けど前を1つ削除するとよさそう?
    - いやいや、bbttb i=2を削除して bttb, 末尾に追加してbttba すると合計2
    - S=ababab, T=bababt の場合、i=1を削除してbabab,末尾に追加すると最速bababt
    - 削除してスライドさせることが重要???
    - 最も一致している部分文字列を見つけ出して、

.....編集距離 動的計画法を使用するとよい
- [編集距離]
    - 文字列sから文字列tへ変換するために必要な処理回数
    - 置換、削除、挿入など自由にできる
- [レーベンシュタイン距離]
    - 編集距離を算出する条件が、挿入、削除、置換だけ
##################################################### """
def check() :
    return


def main() :
    return


if __name__ == "__main__" :
    main()
    #check()
