目的
　当初の目的は
　　有効グラフの閉路があるかどうかの判定をしたい！
　というものだったが、脱線して面白そうなアルゴリズムを見つけたから
　少し触ってみたというもの。

　ここでは、トポロジカルソートは何ぞやということを解説する。
　
　競プロでも活用できる（D問題が解けるようになるかも？）

目次
　〇事前知識編
　　・collection.deque
　〇トポロジカルソートとは

　〇問題例と参考資料
　

//////////////////////////////////////////////////////////
＜事前知識系＞

collectionモジュール
from collections import deque

deque型⇒リスト型っぽいやつ。
扱い方はset(),list(),dict()と同じ感じ
　queというくらいあって、
　　リストの抽出や追加をするといった場合、処理数o(1)で処理できる。
　　例として、
　　　追加・削除　で、　最初の要素か最後の要素か⇒両端の要素
　　最初でも最後でもo(1)処理
　
  リスト型だと、
　　最初の要素を取り出すときはo(1)になるが、
　　最後の要素を取り出すときはo(n)となってしまう。

結論として、
　「collection.deque()」は、グラフアルゴリズムを高速化する便利なツールとして
覚えておきましょう。
　　

//////////////////////////////////////////////////////////

トポロジカルソート
（最長経路を出せるアルゴリズム。非閉路有向グラフに実装可能。）
必要な知識は揃ってるのでやってみる












/////////////////////////////////////////////////////////////
動的計画法問題集
G問題

入力例
入力例１
4 5
1 2
1 3
3 2
2 4
3 4

出力例１
3
------------------------------------------------------------
入力例２
6 3
2 3
4 5
5 6

出力例２
2
-------------------------------------------------------------
入力例3
5 8
5 3
2 3
2 4
5 2
5 1
1 4
4 3
1 3

出力例3
3
/////////////////////////////////////////////////////////////////
参考資料
トポロジカルソートの説明　Qiita
 https://qiita.com/keisuke-ota/items/7190e84019a8c70a9fa6

AtCoder　DP問題集まとめ
 https://atcoder.jp/contests/dp/tasks
