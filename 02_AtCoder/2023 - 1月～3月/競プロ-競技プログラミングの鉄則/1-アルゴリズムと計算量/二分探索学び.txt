



///////////////////////////////////////////////////////////////////////////
＜二分探索＞

""""""""""""""""""""""""""""""""""""""""
考察のための殴り書き。考えた経緯　読む価値無し

〇二分探索の種類
　大まかに分けて二つ
　　１　リスト内に正解が必ずある場合
　　２　リスト内に正解がない可能性がある場合
　　
　１は正解にたどり着くまでそのまま進めていけばいい。
　　ただのwhile文に加えて、
　　再帰関数でも実装可能である。

　２は、進むことに加えて判定が必要
　　うまく実装しないと、端が漏れる可能性もある。
　
　　
　ただ、これは自分で考えた二分探索に限っての話で、
　　判定方法が
　　　while (min,max) < 1であるため

　下記で説明するが、
　　下表のようにソートする
　　　while min <= max
　　　　が最適かも
　　
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
〇二分探索のアルゴリズムについて

　10,20,30,40,50,60,70,80,90
  10,20,30,40
        30,40
           40
             --
　といった流れが一般的らしい
　
　　　while min <= max

　で、重なっても処理し、一番最後はmin,maxの大小が逆になるというアルゴリズム
　
　イメージは、
　　査定したものが合致しなかった際、
　　　それ以上、それ以下をバッサリ切る！といったもの。

　

////////////////////////////////////////////////////////////////////////////

二分探索を学んでいる際にその他見つけたこと

構文
def binary_search(a,b) :
   def _binary_search(a,b,c,d) :
     ----
     -----

　 return _binary_search(a,b,0,len(a)-1)

について
なぜ、def文の中にdef文入れているの？と気になったので
　binary_searchに_binary_searchいらないでしょと思った。

結論
　必要でした。
　　
　もし、_binary_searchがなかった場合、
　main内に
　binary_search(a,b,0,len(a)-1）と指定しなければならなくなる。
　書くことが多くなるということですね。

　また、この書き方をすると、
　　_binary_search内に、　
　　　max = len(x)-1,
      min = 0
　　といった二行が必要なくなるため、スリムになる。

　さらに、この書き方をすると
　　defないの定義がなくなるため、再帰的な書き方ができるようになる。
　　
　　具体的に、
      a,b,tmp,max
      a,b,min,max
  　というような感じで呼び出しができる。

　　再帰で深くというよりかは
　　処理を延長させるイメージかも
　　
　　return tmpで終了ね。
　　すなわち、リスト内に必ず値がある場合、使うことができるということ。

　   

bin()
bin(整数)
　10進数を2進数にした文字列にして出力する関数。