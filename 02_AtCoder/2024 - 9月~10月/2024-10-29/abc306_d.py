""" #####################################################
発想

1~N番目にご飯を食べる。
食べるか否かは決められる。

dpで考える。
0状態の時の最大
1状態の最大
を定義し続ける。

入力が0の時、
1状態も、0状態も食べることができる。
dp[i+1][0] = max(dp[i][0]+入力, dp[i][1]+入力) #両方ご飯が食べられる さらに、食べない場合も存在する
dp[i+1][1] = dp[i][1] #ご飯を食べない状態

入力が1 
dp[i+1][0] = dp[i][0] #値は引き継ぐことができない(ご飯を食べない)
dp[i+1][1] = max(dp[i][0]+入力, dp[i][1]) #健康状態からご飯を食べられる。しかし、食べない場合のほうが良いならそうする

- 入力に負が存在する

##################################################### """
def check() :
    return


def main() :
    N = int(input())
    dp = [[0, -float("inf")]]
    for i in range(N) :
        x, y = map(int, input().split())
        if x == 0 :
            dp.append([max(dp[-1][0], dp[-1][0]+y, dp[-1][1]+y), dp[-1][1]])
        else :
            dp.append([dp[-1][0], max(dp[-1][0]+y, dp[-1][1])])
    #print(dp)
    print(max(dp[-1]))
    return


if __name__ == "__main__" :
    main()
    #check()
